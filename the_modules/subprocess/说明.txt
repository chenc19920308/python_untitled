可见，call/check_call  返回值均是命令的执行状态码，而check_output返回值是命令的执行结果。
如果在执行相关命令时，命令后带有参数，将程序名(即命令)和所带的参数一起放在一个列表中传递给相关方法即可，例如：
>>> import subprocess
>>> retcode = subprocess.call(["ls", "-l"])
>>> print retcode
0

实际上，subprocess模块中只定义了一个类: Popen。上面的几个函数都是基于Popen()的封装(wrapper)。
从Python2.4开始使用Popen来创建进程，用于连接到子进程的标准输入/输出/错误中去，还可以得到子进程的返回值。
这些封装的目的在于让我们容易使用子进程。当我们想要更个性化我们的需求的时候，就要转向Popen类，
该类生成的对象用来代表子进程。与上面的封装不同，Popen对象创建后，主程序不会自动等待子进程完成。
我们必须调用对象的wait()方法，父进程才会等待 (也就是阻塞block)。